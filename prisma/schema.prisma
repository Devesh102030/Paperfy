generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  password        String?   // optional for OAuth users
  image           String?
  emailVerified   DateTime?

  sessions        Session[]
  accounts        Account[]
  papers          Paper[]
  notes           Note[]
  chatMessages    ChatMessage[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Paper {
  id         String      @id @default(cuid())
  title      String
  overview   String?     @db.Text
  audio      String?
  pdfUrl     String
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  notes      Note[]
  chatMessages    ChatMessage[]

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([status])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  paper     Paper    @relation(fields: [paperId], references: [id])
  paperId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@index([paperId])
  @@index([userId])
  @@index([createdAt])
}


model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   
  createdAt DateTime @default(now())

  // Relations
  paper     Paper    @relation(fields: [paperId], references: [id])
  paperId   String

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([paperId])
  @@index([userId])
  @@index([createdAt])
}
